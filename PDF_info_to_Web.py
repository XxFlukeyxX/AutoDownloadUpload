import os
import re
import pdfplumber
import fitz  # PyMuPDF
from pdf2image import convert_from_path
import pytesseract
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.firefox import GeckoDriverManager
import time
import json
from plyer import notification


# üìß ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
email = "pichai_jo"
password = "CSautomation"

uploaded_files_record = "uploaded_files.json"

# ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
def load_uploaded_files():
    if os.path.exists(uploaded_files_record):
        with open(uploaded_files_record, "r", encoding="utf-8") as f:
            return set(json.load(f))  # ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ã‡πá‡∏ï
    return set()

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
def save_uploaded_file(file_path):
    uploaded_files = load_uploaded_files()  # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
    uploaded_files.add(file_path)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    with open(uploaded_files_record, "w", encoding="utf-8") as f:
        json.dump(list(uploaded_files), f, ensure_ascii=False, indent=4)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô JSON
    print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà: {os.path.abspath(uploaded_files_record)}")

def show_notification(title, message):
    notification.notify(
        title=title,
        message=message,
        app_name="PDF Uploader",
        timeout=10  # ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    )

# üìÅ 1Ô∏è‚É£ **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢**
def get_files_in_subfolders(download_folder):
    files = []
    for root, dirs, filenames in os.walk(download_folder):
        for filename in filenames:
            files.append(os.path.join(root, filename))
    return files

# üìò 2Ô∏è‚É£ **‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF**
def extract_pdf_data_with_plumber(pdf_path):
    try:
        with pdfplumber.open(pdf_path) as pdf:
            text = ''.join(page.extract_text(layout=True) or '' for page in pdf.pages)
        return text
    except Exception as e:
        print(f"Error with pdfplumber: {e}")
        return ""

def extract_pdf_data_with_fitz(pdf_path):
    try:
        text = ""
        with fitz.open(pdf_path) as pdf:
            for page in pdf:
                text += page.get_text("text")
        return text
    except Exception as e:
        print(f"Error with PyMuPDF: {e}")
        return ""

def extract_text_with_ocr(pdf_path):
    try:
        pages = convert_from_path(pdf_path)
        text = ""
        for page in pages:
            text += pytesseract.image_to_string(page, lang='tha')
        return text
    except Exception as e:
        print(f"Error with OCR: {e}")
        return ""

def extract_pdf_data(pdf_path):
    # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ pdfplumber ‡∏Å‡πà‡∏≠‡∏ô
    text = extract_pdf_data_with_plumber(pdf_path)
    if not text.strip():
        print("‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ PyMuPDF")
        text = extract_pdf_data_with_fitz(pdf_path)
    if not text.strip():
        print("‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ OCR")
        text = extract_text_with_ocr(pdf_path)
    return text

def thai_to_arabic_number(text):
    thai_numbers = '‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô'
    arabic_numbers = '0123456789'
    translation_table = str.maketrans(thai_numbers, arabic_numbers)
    return text.translate(translation_table)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
def extract_thai_date(text):
    match = re.search(r'\b(\d{1,2})\s*(‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°|‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå|‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°|‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô|‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°|‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô|‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°|‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°|‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô|‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°|‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô|‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°)\s*(\d{4})\b', text)
    if match:
        day, month, year = match.groups()
        thai_months = {
            "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°": "01", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå": "02", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°": "03", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô": "04",
            "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°": "05", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô": "06", "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°": "07", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°": "08",
            "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô": "09", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°": "10", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô": "11", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°": "12"
        }
        month_num = thai_months[month]
        return thai_to_arabic_number(f"{day.zfill(2)}/{month_num}/{int(year) - 543}")  # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä
    return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"

# üìÖ 4Ô∏è‚É£ **‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô Date Picker ‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£**
def select_date_in_datepicker(driver, day, month, year):
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏û.‡∏®.
    thai_year = str(int(year) + 543)  # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏Ñ.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏û.‡∏®.
    thai_months = {
        "01": "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "02": "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "03": "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "04": "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
        "05": "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "06": "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô", "07": "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "08": "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
        "09": "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "10": "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "11": "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "12": "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    }
    thai_month = thai_months[month]

    # ‡πÄ‡∏õ‡∏¥‡∏î Date Picker
    date_input = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentContentCreate1_txtDocumentDate"]')
    date_input.click()
    time.sleep(1)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
    while True:
        current_title = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentContentCreate1_txtDocumentDatetCalendarExtender_title"]').text
        if thai_month in current_title and thai_year in current_title:
            break

        # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        if int(year) < int(current_title[-4:]):  # ‡∏´‡∏≤‡∏Å‡∏õ‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            prev_button = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentContentCreate1_txtDocumentDatetCalendarExtender_prevArrow"]')
            prev_button.click()
        else:  # ‡∏´‡∏≤‡∏Å‡∏õ‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_button = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentContentCreate1_txtDocumentDatetCalendarExtender_nextArrow"]')
            next_button.click()
        time.sleep(1)

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    for row in range(6):
        for col in range(7):
            day_xpath = f'//*[@id="mainContentPlaceHolder_eDocumentContentCreate1_txtDocumentDatetCalendarExtender_day_{row}_{col}"]'
            try:
                day_element = driver.find_element(By.XPATH, day_xpath)
                if day_element.text == str(int(day)):
                    day_element.click()
                    return
            except Exception:
                pass
    print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {day}/{month}/{year} ‡πÉ‡∏ô Date Picker")

# üìÇ **‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå**
download_folder = r"C:\Users\mikot\Desktop\test"
files_in_folder = get_files_in_subfolders(download_folder)

# üì§ 5Ô∏è‚É£ **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå PDF**
uploaded_files = load_uploaded_files()  # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î

# ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
pdf_files = [file for file in files_in_folder if file.endswith(".pdf") and file not in uploaded_files]

if pdf_files:
    latest_file = pdf_files[0]  # ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    pdf_data = extract_pdf_data(latest_file)

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    document_name = re.search(r'‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á[:\s]*(.*)', pdf_data, re.MULTILINE).group(1).strip() if re.search(r'‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á[:\s]*(.*)', pdf_data, re.MULTILINE) else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"
    document_code = re.search(r'(‡∏û‡∏™\.‡∏≠\s*\d*\s*/\s*\d+)', pdf_data)
    document_code = document_code.group(1).strip() if document_code else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"
    impact_name = re.search(r'‡πÄ‡∏£‡∏µ‡∏¢‡∏ô[:\s]*(.*)', pdf_data, re.MULTILINE).group(1).strip() if re.search(r'‡πÄ‡∏£‡∏µ‡∏¢‡∏ô[:\s]*(.*)', pdf_data, re.MULTILINE) else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"
    document_date = extract_thai_date(pdf_data)

    print(f"‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: {document_name}")
    print(f"‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: {document_code}")
    print(f"‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: {impact_name}")
    print(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: {document_date}")

# üì° 5Ô∏è‚É£ **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Selenium**
service = Service(GeckoDriverManager().install())
driver = webdriver.Firefox(service=service)

try:
    driver.get("https://e-doc.rmutto.ac.th/home.aspx")
    time.sleep(5)

    # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏£‡∏Å
    xpath_link = "/html/body/form/nav/div/div[2]/ul/li[2]/a"
    link = driver.find_element(By.XPATH, xpath_link)
    link.click()

    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î
    time.sleep(2)

    driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_txtEmail"]').send_keys(email)
    driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_txtPassword"]').send_keys(password)
    driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_bttLogin"]').click()
    time.sleep(5)

    xpath_notification = '//*[@id="mainContentPlaceHolder_notificationSourceGridViewDocument_postBackUrlLinkButton_0"]'
    notification_link = driver.find_element(By.XPATH, xpath_notification)
    notification_link.click()
    time.sleep(15)

    windows = driver.window_handles
    for w in windows:
        driver.switch_to.window(w)
        if driver.current_url == "https://e-doc.rmutto.ac.th/documentInbox.aspx":
            break

    sent_new_document_button = driver.find_element(By.ID, "mainContentPlaceHolder_eDocumentDirectoryByPersonID_DropDrawList1_bttSentNewDocument")
    sent_new_document_button.click()
    time.sleep(5)

    document_name_input = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentContentCreate1_txtName"]')
    document_name_input.send_keys(document_name)

    document_code_input = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentContentCreate1_txtCodeRef"]')
    document_code_input.send_keys(document_code)

    if document_date != "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà":
        day, month, year = document_date.split("/")
        select_date_in_datepicker(driver, day, month, year)
    else:
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")

    driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentContentCreate1_txtImpactName"]').send_keys(impact_name)

    save_button = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentContentCreate1_Button2"]')
    save_button.click()
    time.sleep(2)

    comment_link = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentContentCreate1_gvDataFrom_gvDataFrom_linkComment_0"]')
    comment_link.click()
    time.sleep(2)

    sent_person_button = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentContentCreate1_bttPersonSent"]')
    sent_person_button.click()
    time.sleep(2)

    sent_directory_add_button = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentDirectorySentTo1_bttDirectoryAdd"]')
    sent_directory_add_button.click()
    time.sleep(2)

   
    keyword_input = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentNotebook1_txtKeyword"]')
    keyword_input.send_keys("‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏à ‡πÅ‡∏¢‡πâ‡∏°‡∏ú‡∏Å‡∏≤")

    additional_button = driver.find_element(By.XPATH, '/html/body/form/div[3]/div[2]/div[4]/div/div/div/div[2]/div/div/div/div[1]/div/div[2]/div/div/div/span/a/span')
    additional_button.click()
    time.sleep(2)

    checkbox_xpath = "//tr[.//a[text()='‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏à ‡πÅ‡∏¢‡πâ‡∏°‡∏ú‡∏Å‡∏≤']]//input[@type='checkbox']"
    checkbox_element = driver.find_element(By.XPATH, checkbox_xpath)
    checkbox_element.click()
    time.sleep(5)

    confirm_button = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentNotebook1_bttConfirm"]')
    confirm_button.click()
    time.sleep(2)

    directory_confirm_button = driver.find_element(By.XPATH, '//*[@id="mainContentPlaceHolder_eDocumentDirectorySentTo1_bttConfirm"]')
    directory_confirm_button.click()
    time.sleep(5)

    uploaded_files = load_uploaded_files()  # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î

    uploaded_count = 0


    for file_path in pdf_files:  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô pdf_files
        # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        if file_path in uploaded_files:
            print(f"‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: {file_path}")
            continue

        try:
            # ‡∏£‡∏≠ input file ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏™‡πà‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
            file_input = WebDriverWait(driver, 20).until(
                EC.presence_of_element_located(
                    (By.XPATH, "//*[@id='mainContentPlaceHolder_eDocumentContentCreate1_AjaxFileUpload1_Html5InputFile']")
                )
            )
            driver.execute_script("arguments[0].value = '';", file_input)  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï input file

            print(f"‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: {file_path}")
            file_input.send_keys(file_path)  # ‡πÉ‡∏™‡πà‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô input
            time.sleep(5)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î

            # ‡πÉ‡∏ä‡πâ JavaScript ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ó‡∏ô
            upload_button = WebDriverWait(driver, 20).until(
                EC.presence_of_element_located(
                    (By.XPATH, "//*[@id='mainContentPlaceHolder_eDocumentContentCreate1_AjaxFileUpload1_UploadOrCancelButton']")
                )
            )
            driver.execute_script("arguments[0].scrollIntoView(true);", upload_button)
            driver.execute_script("arguments[0].click();", upload_button)  # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ú‡πà‡∏≤‡∏ô JavaScript
            print(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file_path}")

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
            save_uploaded_file(file_path)
            uploaded_count += 1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {file_path}: {e}")

finally:
    time.sleep(5)
    driver.quit()

    if uploaded_count > 0:
        print(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {uploaded_count} ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    else:
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ
    if uploaded_count > 0:
        show_notification("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {uploaded_count} ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    else:
        show_notification("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
    print("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    